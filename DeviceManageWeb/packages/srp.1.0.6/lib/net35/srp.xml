<?xml version="1.0"?>
<doc>
    <assembly>
        <name>srp</name>
    </assembly>
    <members>
        <member name="T:SecureRemotePassword.ISrpClient">
            <summary>
            Client-side code of the SRP-6a protocol.
            </summary>
        </member>
        <member name="M:SecureRemotePassword.ISrpClient.GenerateSalt">
            <summary>
            Generates the random salt of the same size as a used hash.
            </summary>
        </member>
        <member name="M:SecureRemotePassword.ISrpClient.DerivePrivateKey(System.String,System.String,System.String)">
            <summary>
            Derives the private key from the given salt, user name and password.
            </summary>
            <param name="salt">The salt.</param>
            <param name="userName">The name of the user.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:SecureRemotePassword.ISrpClient.DeriveVerifier(System.String)">
            <summary>
            Derives the verifier from the private key.
            </summary>
            <param name="privateKey">The private key.</param>
        </member>
        <member name="M:SecureRemotePassword.ISrpClient.GenerateEphemeral">
            <summary>
            Generates the ephemeral value.
            </summary>
        </member>
        <member name="M:SecureRemotePassword.ISrpClient.DeriveSession(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Derives the client session.
            </summary>
            <param name="clientSecretEphemeral">The client secret ephemeral.</param>
            <param name="serverPublicEphemeral">The server public ephemeral.</param>
            <param name="salt">The salt.</param>
            <param name="username">The username.</param>
            <param name="privateKey">The private key.</param>
            <returns>Session key and proof.</returns>
        </member>
        <member name="M:SecureRemotePassword.ISrpClient.VerifySession(System.String,SecureRemotePassword.SrpSession,System.String)">
            <summary>
            Verifies the session using the server-provided session proof.
            </summary>
            <param name="clientPublicEphemeral">The client public ephemeral.</param>
            <param name="clientSession">The client session.</param>
            <param name="serverSessionProof">The server session proof.</param>
        </member>
        <member name="T:SecureRemotePassword.ISrpHash">
            <summary>
            Interface for the hash functions used by SRP-6a protocol.
            </summary>
        </member>
        <member name="M:SecureRemotePassword.ISrpHash.ComputeHash(System.Object[])">
            <summary>
            Computes the hash of the specified <see cref="T:System.String"/> or <see cref="T:SecureRemotePassword.SrpInteger"/> values.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="P:SecureRemotePassword.ISrpHash.HashSizeBytes">
            <summary>
            Gets the hash size in bytes.
            </summary>
        </member>
        <member name="P:SecureRemotePassword.ISrpHash.AlgorithmName">
            <summary>
            Gets the name of the algorithm.
            </summary>
        </member>
        <member name="T:SecureRemotePassword.ISrpServer">
            <summary>
            Server-side code of the SRP-6a protocol.
            </summary>
        </member>
        <member name="M:SecureRemotePassword.ISrpServer.GenerateEphemeral(System.String)">
            <summary>
            Generates the ephemeral value from the given verifier.
            </summary>
            <param name="verifier">Verifier.</param>
        </member>
        <member name="M:SecureRemotePassword.ISrpServer.DeriveSession(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Derives the server session.
            </summary>
            <param name="serverSecretEphemeral">The server secret ephemeral.</param>
            <param name="clientPublicEphemeral">The client public ephemeral.</param>
            <param name="salt">The salt.</param>
            <param name="username">The username.</param>
            <param name="verifier">The verifier.</param>
            <param name="clientSessionProof">The client session proof value.</param>
            <returns>Session key and proof.</returns>
        </member>
        <member name="T:SecureRemotePassword.SrpClient">
            <summary>
            Client-side code of the SRP-6a protocol.
            </summary>
        </member>
        <member name="M:SecureRemotePassword.SrpClient.#ctor(SecureRemotePassword.SrpParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:SecureRemotePassword.SrpClient"/> class.
            </summary>
            <param name="parameters">The parameters of the SRP-6a protocol.</param>
        </member>
        <member name="P:SecureRemotePassword.SrpClient.Parameters">
            <summary>
            Gets or sets the protocol parameters.
            </summary>
        </member>
        <member name="M:SecureRemotePassword.SrpClient.GenerateSalt">
            <summary>
            Generates the random salt of the same size as a used hash.
            </summary>
        </member>
        <member name="M:SecureRemotePassword.SrpClient.DerivePrivateKey(System.String,System.String,System.String)">
            <summary>
            Derives the private key from the given salt, user name and password.
            </summary>
            <param name="salt">The salt.</param>
            <param name="userName">The name of the user.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:SecureRemotePassword.SrpClient.DeriveVerifier(System.String)">
            <summary>
            Derives the verifier from the private key.
            </summary>
            <param name="privateKey">The private key.</param>
        </member>
        <member name="M:SecureRemotePassword.SrpClient.GenerateEphemeral">
            <summary>
            Generates the ephemeral value.
            </summary>
        </member>
        <member name="M:SecureRemotePassword.SrpClient.ComputeA(SecureRemotePassword.SrpInteger)">
            <summary>
            Computes the public ephemeral value using the specified secret.
            </summary>
            <param name="a">Secret ephemeral value.</param>
        </member>
        <member name="M:SecureRemotePassword.SrpClient.ComputeU(SecureRemotePassword.SrpInteger,SecureRemotePassword.SrpInteger)">
            <summary>
            Computes the value of u = H(PAD(A), PAD(B)).
            </summary>
            <param name="A">Client public ehemeral value.</param>
            <param name="B">Server public ehemeral value.</param>
        </member>
        <member name="M:SecureRemotePassword.SrpClient.ComputeS(SecureRemotePassword.SrpInteger,SecureRemotePassword.SrpInteger,SecureRemotePassword.SrpInteger,SecureRemotePassword.SrpInteger)">
            <summary>
            Computes S, the premaster-secret.
            </summary>
            <param name="a">Client secret ephemeral value.</param>
            <param name="B">Server public ephemeral value.</param>
            <param name="u">The computed value of u.</param>
            <param name="x">The private key.</param>
        </member>
        <member name="M:SecureRemotePassword.SrpClient.DeriveSession(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Derives the client session.
            </summary>
            <param name="clientSecretEphemeral">The client secret ephemeral.</param>
            <param name="serverPublicEphemeral">The server public ephemeral.</param>
            <param name="salt">The salt.</param>
            <param name="username">The username.</param>
            <param name="privateKey">The private key.</param>
            <returns>Session key and proof.</returns>
        </member>
        <member name="M:SecureRemotePassword.SrpClient.VerifySession(System.String,SecureRemotePassword.SrpSession,System.String)">
            <summary>
            Verifies the session using the server-provided session proof.
            </summary>
            <param name="clientPublicEphemeral">The client public ephemeral.</param>
            <param name="clientSession">The client session.</param>
            <param name="serverSessionProof">The server session proof.</param>
        </member>
        <member name="T:SecureRemotePassword.SrpConstants">
            <summary>
            SRP-6a protocol constants defined in RFC5054, see https://www.ietf.org/rfc/rfc5054.txt.
            </summary>
        </member>
        <member name="F:SecureRemotePassword.SrpConstants.SafePrime1024">
            <summary>
            Safe prime number, 1024-bit group.
            </summary>
        </member>
        <member name="F:SecureRemotePassword.SrpConstants.Generator1024">
            <summary>
            Generator, 1024-bit group.
            </summary>
        </member>
        <member name="F:SecureRemotePassword.SrpConstants.SafePrime1536">
            <summary>
            Safe prime number, 1536-bit group.
            </summary>
        </member>
        <member name="F:SecureRemotePassword.SrpConstants.Generator1536">
            <summary>
            Generator, 1536-bit group.
            </summary>
        </member>
        <member name="F:SecureRemotePassword.SrpConstants.SafePrime2048">
            <summary>
            Safe prime number, 2048-bit group.
            </summary>
            <remarks>
            Used by secure-remote-password npm package.
            </remarks>
        </member>
        <member name="F:SecureRemotePassword.SrpConstants.Generator2048">
            <summary>
            Generator, 2048-bit group.
            </summary>
        </member>
        <member name="F:SecureRemotePassword.SrpConstants.SafePrime3072">
            <summary>
            Safe prime number, 3072-bit group.
            </summary>
            <remarks>
            This prime is: 2^3072 - 2^3008 - 1 + 2^64 * { [2^2942 pi] + 1690314 }.
            </remarks>
        </member>
        <member name="F:SecureRemotePassword.SrpConstants.Generator3072">
            <summary>
            Generator, 3072-bit group.
            </summary>
        </member>
        <member name="F:SecureRemotePassword.SrpConstants.SafePrime4096">
            <summary>
            Safe prime number, 4096-bit group.
            </summary>
            <remarks>
            This prime is: 2^4096 - 2^4032 - 1 + 2^64 * { [2^3966 pi] + 240904 }.
            </remarks>
        </member>
        <member name="F:SecureRemotePassword.SrpConstants.Generator4096">
            <summary>
            Generator, 4096-bit group.
            </summary>
        </member>
        <member name="F:SecureRemotePassword.SrpConstants.SafePrime6144">
            <summary>
            Safe prime number, 6144-bit group.
            </summary>
            <remarks>
            This prime is: 2^6144 - 2^6080 - 1 + 2^64 * { [2^6014 pi] + 929484 }.
            </remarks>
        </member>
        <member name="F:SecureRemotePassword.SrpConstants.Generator6144">
            <summary>
            Generator, 6144-bit group.
            </summary>
        </member>
        <member name="F:SecureRemotePassword.SrpConstants.SafePrime8192">
            <summary>
            Safe prime number, 8192-bit group.
            </summary>
            <remarks>
            This prime is: 2^8192 - 2^8128 - 1 + 2^64 * { [2^8062 pi] + 4743158 }.
            </remarks>
        </member>
        <member name="F:SecureRemotePassword.SrpConstants.Generator8192">
            <summary>
            Generator, 8192-bit group.
            </summary>
        </member>
        <member name="T:SecureRemotePassword.SrpEphemeral">
            <summary>
            Ephemeral values used during the SRP-6a authentication.
            </summary>
        </member>
        <member name="P:SecureRemotePassword.SrpEphemeral.Public">
            <summary>
            Gets or sets the public part.
            </summary>
        </member>
        <member name="P:SecureRemotePassword.SrpEphemeral.Secret">
            <summary>
            Gets or sets the secret part.
            </summary>
        </member>
        <member name="T:SecureRemotePassword.SrpHash">
            <summary>
            Hashing algorithm for the SRP-6a protocol.
            </summary>
        </member>
        <member name="M:SecureRemotePassword.SrpHash.#ctor(System.Func{System.Security.Cryptography.HashAlgorithm},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SecureRemotePassword.SrpHash"/> class.
            </summary>
            <param name="hasherFactory">The hashing algorithm factory method.</param>
            <param name="algorithmName">The name of the algorithm.</param>
        </member>
        <member name="M:SecureRemotePassword.SrpHash.ComputeHash(System.Object[])">
            <summary>
            Computes the hash of the specified <see cref="T:System.String"/> or <see cref="T:SecureRemotePassword.SrpInteger"/> values.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="P:SecureRemotePassword.SrpHash.HashSizeBytes">
            <summary>
            Gets the size of the hash in bytes.
            </summary>
        </member>
        <member name="P:SecureRemotePassword.SrpHash.AlgorithmName">
            <summary>
            Gets the name of the algorithm.
            </summary>
        </member>
        <member name="M:SecureRemotePassword.SrpHash.CreateHasher(System.String)">
            <summary>
            Creates the hasher for the given hashing algorithm.
            </summary>
            <param name="algorithm">The name of the hashing algorithm.</param>
        </member>
        <member name="T:SecureRemotePassword.SrpHash`1">
            <summary>
            Hashing algorithms for the SRP-6a protocol.
            </summary>
            <typeparam name="T">Hash algorithm type.</typeparam>
        </member>
        <member name="M:SecureRemotePassword.SrpHash`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SecureRemotePassword.SrpHash`1"/> class.
            </summary>
        </member>
        <member name="M:SecureRemotePassword.SrpHash`1.CreateHasher">
            <summary>
            Creates the hasher of the given type <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="T:SecureRemotePassword.SrpInteger">
            <summary>
            A thin wrapper over the <see cref="T:System.Numerics.BigInteger"/> class
            represented as a fixed-length hexadecimal string (optional).
            </summary>
        </member>
        <member name="M:SecureRemotePassword.SrpInteger.#ctor(System.String,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:SecureRemotePassword.SrpInteger"/> class.
            </summary>
            <param name="hex">The hexadecimal.</param>
            <param name="hexLength">Length of the hexadecimal.</param>
        </member>
        <member name="M:SecureRemotePassword.SrpInteger.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:SecureRemotePassword.SrpInteger"/> class from being created.
            </summary>
        </member>
        <member name="M:SecureRemotePassword.SrpInteger.NormalizeWhitespace(System.String)">
            <summary>
            Normalizes the whitespace.
            </summary>
            <param name="hexNumber">The hexadecimal number.</param>
        </member>
        <member name="P:SecureRemotePassword.SrpInteger.Zero">
            <summary>
            Gets the <see cref="T:SecureRemotePassword.SrpInteger"/> value representing 0.
            </summary>
        </member>
        <member name="P:SecureRemotePassword.SrpInteger.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:SecureRemotePassword.SrpInteger.HexLength">
            <summary>
            Gets the hexadecimal length.
            </summary>
        </member>
        <member name="M:SecureRemotePassword.SrpInteger.Pad(System.Int32)">
            <summary>
            Pads the value to the specified new hexadecimal length.
            </summary>
            <param name="newLength">The new length.</param>
        </member>
        <member name="M:SecureRemotePassword.SrpInteger.RandomInteger(System.Int32)">
            <summary>
            Generates the random integer number.
            </summary>
            <param name="bytes">The number length in bytes.</param>
        </member>
        <member name="M:SecureRemotePassword.SrpInteger.ModPow(SecureRemotePassword.SrpInteger,SecureRemotePassword.SrpInteger)">
            <summary>
            Raises the number to the power of the given exponent modulo given modulus.
            </summary>
            <param name="exponent">The exponent.</param>
            <param name="modulus">The modulus.</param>
        </member>
        <member name="M:SecureRemotePassword.SrpInteger.ToHex(System.Nullable{System.Int32})">
            <summary>
            Returns the fixed-length hexadecimal representation of the <see cref="T:SecureRemotePassword.SrpInteger"/> instance.
            </summary>
            <param name="hexLength">Custom hexadecimal length (optional).</param>
        </member>
        <member name="M:SecureRemotePassword.SrpInteger.ToByteArray">
            <summary>
            Returns the byte array representing the given value in big endian encoding.
            </summary>
            <remarks>
            Skips extra leading zeros produced by BigInteger.ToByteArray(), if any.
            Pads the resulting value with leading zeros to match the HexLength property.
            </remarks>
        </member>
        <member name="M:SecureRemotePassword.SrpInteger.op_Implicit(SecureRemotePassword.SrpInteger)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:SecureRemotePassword.SrpInteger"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="srpint">The <see cref="T:SecureRemotePassword.SrpInteger"/> instance.</param>
        </member>
        <member name="M:SecureRemotePassword.SrpInteger.op_Implicit(System.Int32)~SecureRemotePassword.SrpInteger">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> to <see cref="T:SecureRemotePassword.SrpInteger"/>.
            </summary>
            <param name="integer">The <see cref="T:System.Int32"/> value.</param>
        </member>
        <member name="M:SecureRemotePassword.SrpInteger.op_Implicit(System.UInt32)~SecureRemotePassword.SrpInteger">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt32"/> to <see cref="T:SecureRemotePassword.SrpInteger"/>.
            </summary>
            <param name="integer">The <see cref="T:System.UInt32"/> value.</param>
        </member>
        <member name="M:SecureRemotePassword.SrpInteger.op_Implicit(System.Int64)~SecureRemotePassword.SrpInteger">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int64"/> to <see cref="T:SecureRemotePassword.SrpInteger"/>.
            </summary>
            <param name="integer">The <see cref="T:System.Int64"/> value.</param>
        </member>
        <member name="M:SecureRemotePassword.SrpInteger.op_Implicit(System.UInt64)~SecureRemotePassword.SrpInteger">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64"/> to <see cref="T:SecureRemotePassword.SrpInteger"/>.
            </summary>
            <param name="integer">The <see cref="T:System.UInt64"/> value.</param>
        </member>
        <member name="M:SecureRemotePassword.SrpInteger.op_Equality(SecureRemotePassword.SrpInteger,SecureRemotePassword.SrpInteger)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
        </member>
        <member name="M:SecureRemotePassword.SrpInteger.op_Inequality(SecureRemotePassword.SrpInteger,SecureRemotePassword.SrpInteger)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
        </member>
        <member name="M:SecureRemotePassword.SrpInteger.op_Subtraction(SecureRemotePassword.SrpInteger,SecureRemotePassword.SrpInteger)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
        </member>
        <member name="M:SecureRemotePassword.SrpInteger.op_Addition(SecureRemotePassword.SrpInteger,SecureRemotePassword.SrpInteger)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
        </member>
        <member name="M:SecureRemotePassword.SrpInteger.op_Division(SecureRemotePassword.SrpInteger,SecureRemotePassword.SrpInteger)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="dividend">The dividend.</param>
            <param name="divisor">The divisor.</param>
        </member>
        <member name="M:SecureRemotePassword.SrpInteger.op_Modulus(SecureRemotePassword.SrpInteger,SecureRemotePassword.SrpInteger)">
            <summary>
            Implements the operator %.
            </summary>
            <param name="dividend">The dividend.</param>
            <param name="modulus">The modulus.</param>
        </member>
        <member name="M:SecureRemotePassword.SrpInteger.op_Multiply(SecureRemotePassword.SrpInteger,SecureRemotePassword.SrpInteger)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
        </member>
        <member name="M:SecureRemotePassword.SrpInteger.op_ExclusiveOr(SecureRemotePassword.SrpInteger,SecureRemotePassword.SrpInteger)">
            <summary>
            Implements the operator ^ (xor).
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
        </member>
        <member name="M:SecureRemotePassword.SrpInteger.FromByteArray(System.Byte[])">
            <summary>
            Returns a new <see cref="T:SecureRemotePassword.SrpInteger"/> instance from the given array of bytes.
            </summary>
            <param name="bytes">The array of bytes.</param>
        </member>
        <member name="M:SecureRemotePassword.SrpInteger.FromHex(System.String)">
            <summary>
            Returns a new <see cref="T:SecureRemotePassword.SrpInteger"/> instance from the given array of bytes.
            </summary>
            <param name="hex">The hexadecimal string.</param>
        </member>
        <member name="M:SecureRemotePassword.SrpInteger.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SecureRemotePassword.SrpInteger.Equals(SecureRemotePassword.SrpInteger)">
            <inheritdoc/>
        </member>
        <member name="M:SecureRemotePassword.SrpInteger.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SecureRemotePassword.SrpInteger.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:SecureRemotePassword.SrpParameters">
            <summary>
            SRP-6a protocol parameters.
            </summary>
        </member>
        <member name="T:SecureRemotePassword.SrpParameters.SrpHashFunction">
            <summary>
            Hash function signature.
            Computes the hash of the specified <see cref="T:System.String"/> or <see cref="T:SecureRemotePassword.SrpInteger"/> values.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:SecureRemotePassword.SrpParameters.#ctor(System.Func{System.Security.Cryptography.HashAlgorithm},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:SecureRemotePassword.SrpParameters"/> class.
            </summary>
            <param name="hashAlgorithmFactory">The hashing algorithm factory.</param>
            <param name="largeSafePrime">Large safe prime number N (hexadecimal).</param>
            <param name="generator">The generator value modulo N (hexadecimal).</param>
            <param name="paddedLength">The hexadecimal length of N and g.</param>
        </member>
        <member name="M:SecureRemotePassword.SrpParameters.Create``1(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Creates the SRP-6a parameters using the specified hash function.
            </summary>
            <typeparam name="T"><see cref="T:System.Security.Cryptography.HashAlgorithm"/> implementation.</typeparam>
            <param name="largeSafePrime">Large safe prime number N (hexadecimal).</param>
            <param name="generator">The generator value modulo N (hexadecimal).</param>
            <param name="paddedLength">The hexadecimal length of N and g.</param>
        </member>
        <member name="M:SecureRemotePassword.SrpParameters.Create1024``1">
            <summary>
            Creates the SRP-6a parameters using the specified hash function and 1024-bit group.
            </summary>
            <typeparam name="T"><see cref="T:System.Security.Cryptography.HashAlgorithm"/> implementation.</typeparam>
        </member>
        <member name="M:SecureRemotePassword.SrpParameters.Create1536``1">
            <summary>
            Creates the SRP-6a parameters using the specified hash function and 1536-bit group.
            </summary>
            <typeparam name="T"><see cref="T:System.Security.Cryptography.HashAlgorithm"/> implementation.</typeparam>
        </member>
        <member name="M:SecureRemotePassword.SrpParameters.Create2048``1">
            <summary>
            Creates the SRP-6a parameters using the specified hash function and 2048-bit group.
            </summary>
            <typeparam name="T"><see cref="T:System.Security.Cryptography.HashAlgorithm"/> implementation.</typeparam>
        </member>
        <member name="M:SecureRemotePassword.SrpParameters.Create3072``1">
            <summary>
            Creates the SRP-6a parameters using the specified hash function and 3072-bit group.
            </summary>
            <typeparam name="T"><see cref="T:System.Security.Cryptography.HashAlgorithm"/> implementation.</typeparam>
        </member>
        <member name="M:SecureRemotePassword.SrpParameters.Create4096``1">
            <summary>
            Creates the SRP-6a parameters using the specified hash function and 4096-bit group.
            </summary>
            <typeparam name="T"><see cref="T:System.Security.Cryptography.HashAlgorithm"/> implementation.</typeparam>
        </member>
        <member name="M:SecureRemotePassword.SrpParameters.Create6144``1">
            <summary>
            Creates the SRP-6a parameters using the specified hash function and 6144-bit group.
            </summary>
            <typeparam name="T"><see cref="T:System.Security.Cryptography.HashAlgorithm"/> implementation.</typeparam>
        </member>
        <member name="M:SecureRemotePassword.SrpParameters.Create8192``1">
            <summary>
            Creates the SRP-6a parameters using the specified hash function and 8192-bit group.
            </summary>
            <typeparam name="T"><see cref="T:System.Security.Cryptography.HashAlgorithm"/> implementation.</typeparam>
        </member>
        <member name="P:SecureRemotePassword.SrpParameters.PaddedLength">
            <summary>
            Gets or sets the length of the padded N and g values.
            </summary>
        </member>
        <member name="P:SecureRemotePassword.SrpParameters.Prime">
            <summary>
            Gets or sets the large safe prime number (N = 2q+1, where q is prime).
            </summary>
        </member>
        <member name="P:SecureRemotePassword.SrpParameters.Generator">
            <summary>
            Gets or sets the generator modulo N.
            </summary>
        </member>
        <member name="P:SecureRemotePassword.SrpParameters.Hasher">
            <summary>
            Gets or sets the SRP hasher.
            </summary>
        </member>
        <member name="P:SecureRemotePassword.SrpParameters.Hash">
            <summary>
            Gets the hashing function.
            </summary>
        </member>
        <member name="P:SecureRemotePassword.SrpParameters.Pad">
            <summary>
            Gets the function to pad the specified integer value.
            </summary>
        </member>
        <member name="P:SecureRemotePassword.SrpParameters.HashSizeBytes">
            <summary>
            Gets the hash size in bytes.
            </summary>
        </member>
        <member name="P:SecureRemotePassword.SrpParameters.Multiplier">
            <summary>
            Gets the multiplier parameter: k = H(N, g) in SRP-6a (k = 3 for legacy SRP-6).
            </summary>
        </member>
        <member name="M:SecureRemotePassword.SrpParameters.ToString">
            <inheritdoc/>
        </member>
        <member name="T:SecureRemotePassword.SrpServer">
            <summary>
            Server-side code of the SRP-6a protocol.
            </summary>
        </member>
        <member name="M:SecureRemotePassword.SrpServer.#ctor(SecureRemotePassword.SrpParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:SecureRemotePassword.SrpServer"/> class.
            </summary>
            <param name="parameters">The parameters of the SRP-6a protocol.</param>
        </member>
        <member name="P:SecureRemotePassword.SrpServer.Parameters">
            <summary>
            Gets or sets the protocol parameters.
            </summary>
        </member>
        <member name="M:SecureRemotePassword.SrpServer.GenerateEphemeral(System.String)">
            <summary>
            Generates the ephemeral value from the given verifier.
            </summary>
            <param name="verifier">Verifier.</param>
        </member>
        <member name="M:SecureRemotePassword.SrpServer.ComputeB(System.String,SecureRemotePassword.SrpInteger)">
            <summary>
            Generates the public ephemeral value from the given verifier and the secret.
            </summary>
            <param name="verifier">Verifier.</param>
            <param name="b">Secret server ephemeral.</param>
        </member>
        <member name="M:SecureRemotePassword.SrpServer.ComputeS(SecureRemotePassword.SrpInteger,SecureRemotePassword.SrpInteger,SecureRemotePassword.SrpInteger,SecureRemotePassword.SrpInteger)">
            <summary>
            Computes S, the premaster-secret.
            </summary>
            <param name="A">Client public ephemeral value.</param>
            <param name="b">Server secret ephemeral value.</param>
            <param name="u">The computed value of u.</param>
            <param name="v">The verifier.</param>
        </member>
        <member name="M:SecureRemotePassword.SrpServer.DeriveSession(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Derives the server session.
            </summary>
            <param name="serverSecretEphemeral">The server secret ephemeral.</param>
            <param name="clientPublicEphemeral">The client public ephemeral.</param>
            <param name="salt">The salt.</param>
            <param name="username">The username.</param>
            <param name="verifier">The verifier.</param>
            <param name="clientSessionProof">The client session proof value.</param>
            <returns>Session key and proof.</returns>
        </member>
        <member name="T:SecureRemotePassword.SrpSession">
            <summary>
            Session key and proof values generated by SRP-6a protocol.
            </summary>
        </member>
        <member name="P:SecureRemotePassword.SrpSession.Key">
            <summary>
            Gets or sets the session key.
            </summary>
        </member>
        <member name="P:SecureRemotePassword.SrpSession.Proof">
            <summary>
            Gets or sets the session proof.
            </summary>
        </member>
        <member name="T:SecureRemotePassword.SrpUtility">
            <summary>
            Utility methods, extension methods, etc.
            </summary>
        </member>
        <member name="M:SecureRemotePassword.SrpUtility.IsValidInteger(System.String,System.Int32)">
            <summary>
            Checks if the given hexadecimal string is a valid padded SRP integer.
            </summary>
            <param name="hexString">Integer value represented as hexadecimal string.</param>
            <param name="requiredLength">Required length of the hexadecimal string.</param>
            <returns>True, if the value is valid.</returns>
        </member>
        <member name="M:SecureRemotePassword.SrpUtility.IsValidSalt(SecureRemotePassword.SrpParameters,System.String)">
            <summary>
            Checks if the given salt value is a valid padded hexadecimal string.
            </summary>
            <param name="parameters">SRP parameters.</param>
            <param name="salt">Hexadecimal salt string.</param>
            <returns>True, if the salt value is valid.</returns>
        </member>
        <member name="M:SecureRemotePassword.SrpUtility.IsValidVerifier(SecureRemotePassword.SrpParameters,System.String)">
            <summary>
            Checks if the given verifier value is a valid padded hexadecimal string.
            </summary>
            <param name="parameters">SRP parameters.</param>
            <param name="verifier">Password verifier.</param>
            <returns>True, if the verifier value is valid.</returns>
        </member>
    </members>
</doc>
